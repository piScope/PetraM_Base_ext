# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fancy_coefficient')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fancy_coefficient')
    _fancy_coefficient = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fancy_coefficient', [dirname(__file__)])
        except ImportError:
            import _fancy_coefficient
            return _fancy_coefficient
        try:
            _mod = imp.load_module('_fancy_coefficient', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fancy_coefficient = swig_import_helper()
    del swig_import_helper
else:
    import _fancy_coefficient
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import mfem._ser.coefficient
import mfem._ser.array
import mfem._ser.ostream_typemap
import mfem._ser.matrix
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.gridfunc
import mfem._ser.mesh
import mfem._ser.ncmesh
import mfem._ser.element
import mfem._ser.geom
import mfem._ser.table
import mfem._ser.vertex
import mfem._ser.fespace
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.handle
import mfem._ser.bilininteg
import mfem._ser.linearform
class PiecewiseLinearMaterialProperty(mfem._ser.coefficient.Coefficient):
    """Proxy of C++ PetraM_Base_extra::PiecewiseLinearMaterialProperty class."""

    __swig_setmethods__ = {}
    for _s in [mfem._ser.coefficient.Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLinearMaterialProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._ser.coefficient.Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLinearMaterialProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PetraM_Base_extra::PiecewiseLinearMaterialProperty self, Coefficient _cf, Vector x, Vector y) -> PiecewiseLinearMaterialProperty
        __init__(PetraM_Base_extra::PiecewiseLinearMaterialProperty self, GridFunction _gf, Vector x, Vector y, int comp=1) -> PiecewiseLinearMaterialProperty
        __init__(PetraM_Base_extra::PiecewiseLinearMaterialProperty self, GridFunction _gf, Vector x, Vector y) -> PiecewiseLinearMaterialProperty
        """
        this = _fancy_coefficient.new_PiecewiseLinearMaterialProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(PiecewiseLinearMaterialProperty self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _fancy_coefficient.PiecewiseLinearMaterialProperty_Eval(self, T, ip)

    __swig_destroy__ = _fancy_coefficient.delete_PiecewiseLinearMaterialProperty
    __del__ = lambda self: None
PiecewiseLinearMaterialProperty_swigregister = _fancy_coefficient.PiecewiseLinearMaterialProperty_swigregister
PiecewiseLinearMaterialProperty_swigregister(PiecewiseLinearMaterialProperty)

class Poly1DMaterialProperty(mfem._ser.coefficient.Coefficient):
    """Proxy of C++ PetraM_Base_extra::Poly1DMaterialProperty class."""

    __swig_setmethods__ = {}
    for _s in [mfem._ser.coefficient.Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poly1DMaterialProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._ser.coefficient.Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Poly1DMaterialProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PetraM_Base_extra::Poly1DMaterialProperty self, Coefficient _cf, Vector coeff, double _max_range, double _min_range) -> Poly1DMaterialProperty
        __init__(PetraM_Base_extra::Poly1DMaterialProperty self, Coefficient _cf, Vector coeff, double _max_range) -> Poly1DMaterialProperty
        __init__(PetraM_Base_extra::Poly1DMaterialProperty self, Coefficient _cf, Vector coeff) -> Poly1DMaterialProperty
        __init__(PetraM_Base_extra::Poly1DMaterialProperty self, GridFunction _gf, Vector coeff, int comp=1, double _max_range, double _min_range) -> Poly1DMaterialProperty
        __init__(PetraM_Base_extra::Poly1DMaterialProperty self, GridFunction _gf, Vector coeff, int comp=1, double _max_range) -> Poly1DMaterialProperty
        __init__(PetraM_Base_extra::Poly1DMaterialProperty self, GridFunction _gf, Vector coeff, int comp=1) -> Poly1DMaterialProperty
        __init__(PetraM_Base_extra::Poly1DMaterialProperty self, GridFunction _gf, Vector coeff) -> Poly1DMaterialProperty
        """
        this = _fancy_coefficient.new_Poly1DMaterialProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(Poly1DMaterialProperty self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _fancy_coefficient.Poly1DMaterialProperty_Eval(self, T, ip)

    __swig_destroy__ = _fancy_coefficient.delete_Poly1DMaterialProperty
    __del__ = lambda self: None
Poly1DMaterialProperty_swigregister = _fancy_coefficient.Poly1DMaterialProperty_swigregister
Poly1DMaterialProperty_swigregister(Poly1DMaterialProperty)

class UniaxialConstantMaterialProperty(mfem._ser.coefficient.MatrixCoefficient):
    """Proxy of C++ PetraM_Base_extra::UniaxialConstantMaterialProperty class."""

    __swig_setmethods__ = {}
    for _s in [mfem._ser.coefficient.MatrixCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniaxialConstantMaterialProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._ser.coefficient.MatrixCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniaxialConstantMaterialProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PetraM_Base_extra::UniaxialConstantMaterialProperty self, Coefficient _cf, DenseMatrix m) -> UniaxialConstantMaterialProperty
        __init__(PetraM_Base_extra::UniaxialConstantMaterialProperty self, GridFunction _gf, DenseMatrix m, int comp=1) -> UniaxialConstantMaterialProperty
        __init__(PetraM_Base_extra::UniaxialConstantMaterialProperty self, GridFunction _gf, DenseMatrix m) -> UniaxialConstantMaterialProperty
        """
        this = _fancy_coefficient.new_UniaxialConstantMaterialProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, K, T, ip):
        """Eval(UniaxialConstantMaterialProperty self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"""
        return _fancy_coefficient.UniaxialConstantMaterialProperty_Eval(self, K, T, ip)

    __swig_destroy__ = _fancy_coefficient.delete_UniaxialConstantMaterialProperty
    __del__ = lambda self: None
UniaxialConstantMaterialProperty_swigregister = _fancy_coefficient.UniaxialConstantMaterialProperty_swigregister
UniaxialConstantMaterialProperty_swigregister(UniaxialConstantMaterialProperty)

# This file is compatible with both classic and new-style classes.


